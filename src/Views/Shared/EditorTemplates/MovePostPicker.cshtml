@model int?
@{
    var prop = ViewData.ModelMetadata.ContainerType.GetProperty(ViewData.ModelMetadata.PropertyName);
    var meta = ViewData.ModelMetadata;
    var state = ViewData.ModelState[ViewData.ModelMetadata.PropertyName];
    var feedback = state?.Errors?.FirstOrDefault()?.ErrorMessage;
    bool group = ViewData["FormGroup"] as bool? ?? !meta.HideSurroundingHtml;
    bool label = ViewData["FormLabel"] as bool? ?? !meta.HideSurroundingHtml;
    bool text = (ViewData["FormText"] as bool? ?? true) && meta.Description != null;

    var attrs = new Dictionary<string, object>();
    if (feedback != null) {
        attrs.Append("class", "is-invalid");
    }
    if (prop.IsRequired()) {
        attrs["required"] = null;
    }

    var source = ViewData["Source"] as Post;
    var app = source?.App() as PostsApp;

    // get spaces where we have Post permission
    var spaces = SpaceService.Search(new SpaceQuery() { Archived = false, Filter = true, OrderBy = "Name" }).Where(x => x.HasPermission(Permission.Post));

    //  get PostApps for each space above
    var apps = spaces.Select(s => AppService.GetApps<PostsApp>(s.Id).FirstOrDefault()).Where(a => a != null);
}


@if (group) {
    WriteLiteral(@"<div class=""form-group"">");
}

@if (label) {
    <label for="@ViewData.TemplateInfo.GetFullHtmlFieldId("AppId")">Space</label>
}

<select class="form-control custom-select app-picker" id="@ViewData.TemplateInfo.GetFullHtmlFieldId("AppId")" name="AppId">
    @foreach (var a in apps) {
        <option value="@a.Id" @if (a.SpaceId == source?.SpaceId.Value) { <text> selected</text>}>@a.Space().Name</option>
    }
</select>

@if (group) {
    WriteLiteral(@"</div>");
}

